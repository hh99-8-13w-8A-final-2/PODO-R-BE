name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  RESOURCE_PATH: ./src/main/resources/application.yaml
  PROJECT_NAME: podor
  # Database
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  # JWT Secret
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  # OAUTH
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  KAKAO_REDIRECT_URL: ${{ secrets.KAKAO_REDIRECT_URL }}
  TWITTER_CONSUMER_ID: ${{ secrets.TWITTER_CONSUMER_ID }}
  TWITTER_CONSUMER_SECRET_KEY: ${{ secrets.TWITTER_CONSUMER_SECRET_KEY }}
  TWITTER_REDIRECT_URL: ${{ secrets.TWITTER_REDIRECT_URL }}
  # AWS S3
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  S3_REGION: ${{ secrets.S3_REGION }}
  # SLACK WEBHOOK
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Generate Environment Variables File for Properties
        uses: microsoft/variable-substitution@v1
        with:
          files: $RESOURCE_PATH
        env:
          spring.datasource.url: $DB_URL
          spring.datasource.username: $DB_USERNAME
          spring.datasource.password: $DB_PASSWORD
          jwt.secretKey: $JWT_SECRET_KEY
          kakao.client-id: $KAKAO_CLIENT_ID
          kakao.redirect-uri: $KAKAO_REDIRECT_URL
          twitter.consumer-id: $TWITTER_CONSUMER_ID
          twitter.consumer-secretkey: $TWITTER_CONSUMER_SECRET_KEY
          twitter.redirect-uri: $TWITTER_REDIRECT_URL
          cloud.aws.credentials.access-key: $AWS_ACCESS_KEY_ID
          cloud.aws.credentials.secret-key: $AWS_SECRET_ACCESS_KEY
          cloud.aws.s3.bucket: $S3_BUCKET_NAME
          cloud.aws.region.static: $S3_REGION
          logging.slack.webhook-uri: $SLACK_WEBHOOK_URL

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml Copy
      - name: Copy appspec
        run: cp ./appspec.yml ./deploy/

      # script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./$PROJECT_NAME.zip ./deploy

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
        run: aws s3 cp --region $S3_REGION --acl private ./$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/

      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
        run: aws deploy create-deployment --application-name podor --deployment-group-name podor-be --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME.zip --region $S3_REGION